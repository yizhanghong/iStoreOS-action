name: x86_iStoreOS

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 19 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  REPO_BRANCH: istoreos-22.03 
  CONFIG_FILE: configs/x86.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: x86
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools        
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo -E apt-get -y install clang
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: User Feeds
      run: |
        cd $OPENWRT_PATH
        #echo 'src-git 5gsupport https://github.com/Siriling/5G-Modem-Support.git;main' >> feeds.conf.default
        #echo 'src-git wwan_packages https://github.com/immortalwrt/wwan-packages.git' >> feeds.conf.default
        echo 'src-git modem https://github.com/FUjr/modem_feeds.git;main' >> feeds.conf.default
        #rm -rf package/wwan
        #git clone https://github.com/immortalwrt/wwan-packages.git package/wwan

    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        
    - name: Modem Support
      run: |
        cd $OPENWRT_PATH 
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
        git clone --depth=1 https://github.com/Siriling/5G-Modem-Support Modem-Support
        # 5G通信模组拨号工具
        mkdir package/community
        mkdir package/community/quectel_QMI_WWAN
        mkdir package/community/quectel_cm_5G
        mkdir package/community/quectel_MHI
        mkdir package/community/luci-app-hypermodem        
        mkdir package/community/sms-tool
        mkdir package/community/luci-app-sms-tool
        cp -rf ./Modem-Support/quectel_QMI_WWAN/* package/community/quectel_QMI_WWAN
        cp -rf ./Modem-Support/quectel_cm_5G/* package/community/quectel_cm_5G
        cp -rf ./Modem-Support/quectel_MHI/* package/community/quectel_MHI
        cp -rf ./Modem-Support/luci-app-hypermodem/* package/community/luci-app-hypermodem
        cp -rf ./Modem-Support/sms-tool/* package/community/sms-tool
        cp -rf ./Modem-Support/luci-app-sms-tool/* package/community/luci-app-sms-tool
        
        #5G相关
        echo "
        # 5G模组信号插件
        # CONFIG_PACKAGE_ext-rooter-basic=y
        
        # 5G模组短信插件
        #CONFIG_PACKAGE_luci-app-sms-tool=y
        
        # 5G模组信息插件
        # CONFIG_PACKAGE_luci-app-3ginfo-lite=y
        # CONFIG_PACKAGE_luci-app-3ginfo=y
        
        # 5G模组信息插件+AT工具
        # CONFIG_PACKAGE_luci-app-cpe=y
        # CONFIG_PACKAGE_sendat=y
        CONFIG_PACKAGE_sms-tool=y
        CONFIG_PACKAGE_luci-app-modem=y
        
        # QMI拨号工具（移远，广和通）
        # CONFIG_PACKAGE_quectel-CM-5G=y
        # CONFIG_PACKAGE_fibocom-dial=y
        
        # QMI拨号软件
        # CONFIG_PACKAGE_kmod-qmi_wwan_f=y
        # CONFIG_PACKAGE_luci-app-hypermodem=y
        
        # Gobinet拨号软件
        # CONFIG_PACKAGE_kmod-gobinet=y
        # CONFIG_PACKAGE_luci-app-gobinetmodem=y
        
        # 串口调试工具
        CONFIG_PACKAGE_minicom=y
        
        # 脚本拨号工具依赖
        CONFIG_PACKAGE_procps-ng=y
        CONFIG_PACKAGE_procps-ng-ps=y
        " >> .config
        
        # 额外组件
        echo "
        CONFIG_GRUB_IMAGES=y
        CONFIG_VMDK_IMAGES=y
        CONFIG_VDI_IMAGES=y
        " >> .config
        #Passwall和Passwall2
        git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall-packages package/passwall-packages
        git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall2 package/passwall2 
        git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall package/passwall
        git clone --depth=1 https://github.com/vernesong/OpenClash package/OpenClash
        find ./ | grep Makefile | grep v2ray-geodata | xargs rm -f
        find ./ | grep Makefile | grep mosdns | xargs rm -f
        git clone https://github.com/sbwml/luci-app-mosdns -b v5-lua package/mosdns
        git clone https://github.com/gdy666/luci-app-lucky.git package/lucky
        echo "
        #CONFIG_PACKAGE_luci-app-passwall2=y
        CONFIG_PACKAGE_luci-app-passwall=y
        #CONFIG_PACKAGE_luci-app-passwall_Transparent_Proxy=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_IPv6_Nat=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Kcptun=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y
        #CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y
        #CONFIG_PACKAGE_luci-app-haproxy-tcp=y
        " >> .config

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is iStoreOS Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.100.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
